generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    minions       Minion[]
    mounts        Mount[]
    orchestrions  Orchestrion[]
    spells        Spell[]
    cards         Card[]
    emotes        Emote[]
    hairstyles    Hairstyle[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model VerminionStats {
    id               String  @id @default(cuid())
    cost             Int
    attack           Int
    defense          Int
    hp               Int
    speed            Int
    aoe              Boolean
    skill            String
    skillDescription String
    skillAngle       Int
    skillCost        Int
    skillType        String
    eye              Boolean
    gate             Boolean
    shield           Boolean
    minion           Minion  @relation(fields: [minionId], references: [id])
    minionId         String  @unique
}

model Source {
    id          String     @id @default(cuid())
    type        String
    text        String
    minion      Minion?    @relation(fields: [minionId], references: [id])
    minionId    String?
    mount       Mount?     @relation(fields: [mountId], references: [id])
    mountId     String?
    spell       Spell?     @relation(fields: [spellId], references: [id])
    spellId     String?
    card        Card?      @relation(fields: [cardId], references: [id])
    cardId      String?
    emote       Emote?     @relation(fields: [emoteId], references: [id])
    emoteId     String?
    hairstyle   Hairstyle? @relation(fields: [hairstyleId], references: [id])
    hairstyleId String?
}

model Minion {
    id               String          @id @default(cuid())
    name             String
    shortDescription String
    description      String
    patch            String
    tradeable        Boolean
    behavior         String
    race             String
    image            String?
    owned            String
    verminion        VerminionStats?
    sources          Source[]
    owners           User[]
}

// We could upload the BGM too
model Mount {
    id               String   @id @default(cuid())
    name             String
    shortDescription String
    description      String
    patch            String
    tradeable        Boolean
    image            String?
    owned            String
    sources          Source[]
    owners           User[]
}

model Orchestrion {
    id          String  @id @default(cuid())
    name        String
    description String
    patch       String
    tradeable   Boolean
    number      String
    image       String?
    owned       String
    owners      User[]
}

model Spell {
    id          String   @id @default(cuid())
    name        String
    description String
    patch       String
    tradeable   Boolean
    number      String
    image       String?
    owned       String
    owners      User[]
    sources     Source[]
}

model CardStats {
    id     String @id @default(cuid())
    card   Card   @relation(fields: [cardId], references: [id])
    cardId String @unique
    top    Int
    right  Int
    bottom Int
    left   Int
}

model Card {
    id          String     @id @default(cuid())
    name        String
    description String
    patch       String
    tradeable   Boolean
    stars       String
    number      String
    image       String?
    owned       String
    stats       CardStats?
    owners      User[]
    sources     Source[]
}

model Hairstyle {
    id          String   @id @default(cuid())
    name        String
    description String
    patch       String
    tradeable   Boolean
    image       String?
    owned       String
    owners      User[]
    sources     Source[]
}

model Emote {
    id        String   @id @default(cuid())
    name      String
    patch     String
    tradeable Boolean
    image     String?
    owned     String
    owners    User[]
    sources   Source[]
}

model Dungeon {
    id          Int     @id @default(autoincrement())
    name        String
    description String
    image       String?
}

model VariantDungeon {
    id          Int     @id @default(autoincrement())
    name        String
    description String
    image       String?
}

model Trial {
    id          Int     @id @default(autoincrement())
    name        String
    description String
    image       String?
}

model Raid {
    id          Int     @id @default(autoincrement())
    name        String
    description String
    image       String?
}

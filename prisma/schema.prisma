generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  cards         Card[]        @relation("CardToUser")
  emotes        Emote[]       @relation("EmoteToUser")
  hairstyles    Hairstyle[]   @relation("HairstyleToUser")
  minions       Minion[]      @relation("MinionToUser")
  mounts        Mount[]       @relation("MountToUser")
  orchestrions  Orchestrion[] @relation("OrchestrionToUser")
  spells        Spell[]       @relation("SpellToUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerminionStats {
  id               String  @id @default(cuid())
  cost             Int
  attack           Int
  defense          Int
  hp               Int
  speed            Int
  aoe              Boolean
  skill            String
  skillDescription String
  skillAngle       Int
  skillCost        Int
  skillType        String
  eye              Boolean
  gate             Boolean
  shield           Boolean
  minionId         String  @unique
  minion           Minion  @relation(fields: [minionId], references: [id])
}

model Minion {
  id               String           @id @default(cuid())
  name             String
  shortDescription String
  description      String
  patch            String
  tradeable        Boolean
  behavior         String
  race             String
  image            String?
  owned            String
  sources          MinionSource[]
  verminion        VerminionStats?
  dungeons         Dungeon[]        @relation("DungeonToMinion")
  raids            Raid[]           @relation("MinionToRaid")
  trials           Trial[]          @relation("MinionToTrial")
  owners           User[]           @relation("MinionToUser")
  variants         VariantDungeon[] @relation("MinionToVariantDungeon")
}

model MinionSource {
  id       String  @id @default(cuid())
  type     String
  text     String
  minionId String?
  minion   Minion? @relation(fields: [minionId], references: [id], map: "Source_minionId_fkey")
}

model Mount {
  id               String           @id @default(cuid())
  name             String
  shortDescription String
  description      String
  patch            String
  tradeable        Boolean
  image            String?
  owned            String
  sources          MountSource[]
  dungeons         Dungeon[]        @relation("DungeonToMount")
  raids            Raid[]           @relation("MountToRaid")
  trials           Trial[]          @relation("MountToTrial")
  owners           User[]           @relation("MountToUser")
  variants         VariantDungeon[] @relation("MountToVariantDungeon")
}

model MountSource {
  id      String  @id @default(cuid())
  type    String
  text    String
  mountId String?
  mount   Mount?  @relation(fields: [mountId], references: [id])
}

model Orchestrion {
  id          String              @id @default(cuid())
  name        String
  description String
  patch       String
  tradeable   Boolean
  number      String
  image       String?
  owned       String
  sources     OrchestrionSource[]
  dungeons    Dungeon[]           @relation("DungeonToOrchestrion")
  raids       Raid[]              @relation("OrchestrionToRaid")
  trials      Trial[]             @relation("OrchestrionToTrial")
  owners      User[]              @relation("OrchestrionToUser")
  variants    VariantDungeon[]    @relation("OrchestrionToVariantDungeon")
}

model OrchestrionSource {
  id            String       @id @default(cuid())
  type          String
  text          String
  orchestrionId String?
  orchestrion   Orchestrion? @relation(fields: [orchestrionId], references: [id])
}

model Spell {
  id          String           @id @default(cuid())
  name        String
  description String
  patch       String
  image       String?
  owned       String
  number      Int
  sources     SpellSource[]
  dungeons    Dungeon[]        @relation("DungeonToSpell")
  raids       Raid[]           @relation("RaidToSpell")
  trials      Trial[]          @relation("SpellToTrial")
  owners      User[]           @relation("SpellToUser")
  variants    VariantDungeon[] @relation("SpellToVariantDungeon")
}

model SpellSource {
  id      String  @id @default(cuid())
  type    String
  text    String
  spellId String?
  spell   Spell?  @relation(fields: [spellId], references: [id])
}

model CardStats {
  id     String @id @default(cuid())
  cardId String @unique
  top    Int
  right  Int
  bottom Int
  left   Int
  card   Card   @relation(fields: [cardId], references: [id])
}

model Card {
  id          String           @id @default(cuid())
  name        String
  description String
  patch       String
  number      String
  image       String?
  owned       String
  stars       Int
  sources     CardSource[]
  stats       CardStats?
  dungeons    Dungeon[]        @relation("CardToDungeon")
  raids       Raid[]           @relation("CardToRaid")
  trials      Trial[]          @relation("CardToTrial")
  owners      User[]           @relation("CardToUser")
  variants    VariantDungeon[] @relation("CardToVariantDungeon")
}

model CardSource {
  id     String  @id @default(cuid())
  cardId String?
  text   String
  type   String
  card   Card?   @relation(fields: [cardId], references: [id])
}

model Hairstyle {
  id          String            @id @default(cuid())
  name        String
  description String
  patch       String
  tradeable   Boolean
  image       String?
  owned       String
  sources     HairstyleSource[]
  dungeons    Dungeon[]         @relation("DungeonToHairstyle")
  raids       Raid[]            @relation("HairstyleToRaid")
  trials      Trial[]           @relation("HairstyleToTrial")
  owners      User[]            @relation("HairstyleToUser")
  variants    VariantDungeon[]  @relation("HairstyleToVariantDungeon")
}

model HairstyleSource {
  id          String     @id @default(cuid())
  type        String
  text        String
  hairstyleId String?
  hairstyle   Hairstyle? @relation(fields: [hairstyleId], references: [id])
}

model Emote {
  id        String           @id @default(cuid())
  name      String
  patch     String
  tradeable Boolean
  image     String?
  owned     String
  sources   EmoteSource[]
  dungeons  Dungeon[]        @relation("DungeonToEmote")
  raids     Raid[]           @relation("EmoteToRaid")
  trials    Trial[]          @relation("EmoteToTrial")
  owners    User[]           @relation("EmoteToUser")
  variants  VariantDungeon[] @relation("EmoteToVariantDungeon")
}

model EmoteSource {
  id      String  @id @default(cuid())
  type    String
  text    String
  emoteId String?
  emote   Emote?  @relation(fields: [emoteId], references: [id])
}

model Dungeon {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  image        String?
  patch        String?
  cards        Card[]        @relation("CardToDungeon")
  emotes       Emote[]       @relation("DungeonToEmote")
  hairstyles   Hairstyle[]   @relation("DungeonToHairstyle")
  minions      Minion[]      @relation("DungeonToMinion")
  mounts       Mount[]       @relation("DungeonToMount")
  orchestrions Orchestrion[] @relation("DungeonToOrchestrion")
  spells       Spell[]       @relation("DungeonToSpell")
}

model VariantDungeon {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  image        String?
  patch        String?
  cards        Card[]        @relation("CardToVariantDungeon")
  emotes       Emote[]       @relation("EmoteToVariantDungeon")
  hairstyles   Hairstyle[]   @relation("HairstyleToVariantDungeon")
  minions      Minion[]      @relation("MinionToVariantDungeon")
  mounts       Mount[]       @relation("MountToVariantDungeon")
  orchestrions Orchestrion[] @relation("OrchestrionToVariantDungeon")
  spells       Spell[]       @relation("SpellToVariantDungeon")
}

model Trial {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  image        String?
  patch        String?
  cards        Card[]        @relation("CardToTrial")
  emotes       Emote[]       @relation("EmoteToTrial")
  hairstyles   Hairstyle[]   @relation("HairstyleToTrial")
  minions      Minion[]      @relation("MinionToTrial")
  mounts       Mount[]       @relation("MountToTrial")
  orchestrions Orchestrion[] @relation("OrchestrionToTrial")
  spells       Spell[]       @relation("SpellToTrial")
}

model Raid {
  id           Int           @id @unique @default(autoincrement())
  name         String
  description  String
  image        String?
  patch        String?
  cards        Card[]        @relation("CardToRaid")
  emotes       Emote[]       @relation("EmoteToRaid")
  hairstyles   Hairstyle[]   @relation("HairstyleToRaid")
  minions      Minion[]      @relation("MinionToRaid")
  mounts       Mount[]       @relation("MountToRaid")
  orchestrions Orchestrion[] @relation("OrchestrionToRaid")
  spells       Spell[]       @relation("RaidToSpell")
}
